/*
 * Copyright (C) 2014 Pavel Stastny
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <`http://www.gnu.org/licenses/>.
 */

/*plugins {
    id 'com.gradle.build-scan' version '1.0'
}




buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}*/
println "Building K7; please read BUILD-README.txt"

apply plugin: 'java' // -> generate javadoc

configurations {
    /**
     * Contains external editors
     */
    editors {
        transitive = false
    }
}


configurations.all {
    exclude module: 'slf4j-log4j12'
}


/*
if(JavaVersion.current() != JavaVersion.VERSION_1_8){
	println JavaVersion.current()
	throw new GradleException("This build must be run with java 8")
}*/

dependencies {
    // editor dependency
    // editors group: "cz.incad.kramerius", name: "editor", version: "5.1.1", ext: "war"
    // rightseditor dependency
    //editors group: "cz.incad.kramerius", name: "rightseditor", version: "5.1.1", ext: "war"
}



repositories {
    mavenLocal()
}

/*
allprojects {
	 group='cz.incad.kramerius'
	 version='7.0.3-beta2_cdk'
}*/


/**
 * Inject to all subprojects
 */
allprojects {


    apply plugin:'java'
    apply plugin:'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    compileJava.options.encoding = 'UTF-8'


    ext.guiceversion ='4.2.2'
    ext.postgresversion = '42.1.4'
     ext.slf4jversion='1.7.35'
    //ext.jerseyversion = '1.17.1'
    ext.jerseyversion = '1.19.4'

	ext.keycloakversion = '20.0.2'

    ext.generatedSources = "generated-sources"


    sourceCompatibility = 1.8
    targetCompatibility= 1.8

    configurations {
        database
    }

    dependencies {

        // postgresql to all subprojects
        api "org.postgresql:postgresql:${postgresversion}"
        database "org.postgresql:postgresql:${postgresversion}"

        // guice to all subprojects
        api "com.google.inject:guice:${guiceversion}"
        api "com.google.inject.extensions:guice-multibindings:${guiceversion}"
        api "com.google.inject.extensions:guice-multibindings:${guiceversion}"
        api "com.google.inject.extensions:guice-servlet:${guiceversion}"
        api "com.google.inject.extensions:guice-assistedinject:${guiceversion}"
        api "javax.inject:javax.inject:1"

        // logging
        api "org.slf4j:slf4j-api:${slf4jversion}"
        api "org.slf4j:log4j-over-slf4j:${slf4jversion}"
        api "org.slf4j:slf4j-jdk14:${slf4jversion}"
        api "org.slf4j:jcl-over-slf4j:${slf4jversion}"

        //dom4j
        implementation 'jaxen:jaxen:1.2.0'
        implementation 'org.dom4j:dom4j:2.1.1'

        //junit to all subprojects
        testImplementation "junit:junit:4.4"
        //testCompile "org.easymock:easymock:3.0"
        testImplementation "org.easymock:easymock:4.3"

    }

    repositories {
        /** libraries doesn't exist in public repo */
        flatDir {
            dirs "../buildSrc/lib"
        }
        flatDir {
            dirs "../../buildSrc/lib"
        }

		/*	
        maven {
            url "http://kramerius.googlecode.com/svn/mvnrepo"
			allowInsecureProtocol = true
        }

        maven {
            url "http://aplikator.googlecode.com/svn/mvnrepository"
			allowInsecureProtocol = true
        }*/


        mavenLocal()
        mavenCentral()


		/*
        maven {
            url "https://m2.duraspace.org/content/repositories/releases"
        }*/

        maven {
            url "https://maven.java.net/content/repositories/snapshots/"
        }

        maven {
            url "https://guiceyfruit.googlecode.com/svn/repo/releases/"
        }


        maven {
            url "https://jsdoctk-plugin.googlecode.com/svn/repo"
        }

        maven {
            url "https://repository.springsource.com/maven/bundles/external"
        }

        maven {
            url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases"
			allowInsecureProtocol = true
        }

        maven {
            url "https://download.osgeo.org/webdav/geotools/"
			allowInsecureProtocol = true
        }

        maven {
            url "https://repo.jfrog.org/artifactory/libs-releases/"
        }

        /*
        maven {
            url "https://maven.atlassian.com/content/groups/public"
        }*/

        maven {
            url "https://jbig2-imageio.googlecode.com/svn/maven-repository"
        }

        maven {
            url "https://jitpack.io"
        }
        /*
        maven {
            url "http://download.java.net/maven/2/"
        }*/

    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    //~ overwrite windows encoding
    test {
        systemProperty "file.encoding", "utf-8"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.fork = true

        // if there JDK6_HOME path defined; use it
        if (System.env.JDK6_HOME != null) {
            options.bootClasspath = "$System.env.JDK6_HOME/jre/lib/rt.jar"
            options.bootClasspath += "$File.pathSeparator$System.env.JDK6_HOME/jre/lib/jsse.jar"
            // if there JDK7_HOME path defined; use it
        } else if (System.env.JDK7_HOME != null) {
            options.bootClasspath = "$System.env.JDK7_HOME/jre/lib/rt.jar"
            options.bootClasspath += "$File.pathSeparator$System.env.JDK7_HOME/jre/lib/jsse.jar"
        }
    }


    // ~ overwritten windows encoding

    // remove all dependencies without group id
//    install.repositories.mavenInstaller.pom.whenConfigured {pom ->
//        pom.dependencies.removeAll { it.groupId == null || it.groupId.equals("") }
//    }

	task printAllDependencies(type: DependencyReportTask) {}

}

/**
 * Distribution task; zipInstallDir first
 */
task distZip(type:Zip, dependsOn: 'zipInstallDir') {
    description "Create full distribution zip"
    baseName "kramerius"
    group "Distribution"
    from {'search/build/libs'}
    //from {'processes/migration/build/distributions'}
    from {'security/security-core/build/libs'}
    //from configurations.editors
    from configurations.database
    from {'build/installation'}
    eachFile {
        it.path = it.path.replace('-5.1.0.war', '.war')
    }

    exclude "**.tar"
    //from 'build/distributions/kramerius-javadoc.zip'
}

task distZipWOEditors(type: Zip, dependsOn: 'zipInstallDir') {
    description "Create  distributions zip without editors"
    baseName "kramerius"
    group "Distribution"
    from { 'search/build/libs' }
    from { 'security-core/build/libs' }
    from { 'build/installation' }
}

/**
 * Patch distribution task
 */
task distPatchZip(type:Zip) {
    description "Create patch distribution zip"
    baseName "kramerius-patch"
    group "Distribution"
    from configurations.database
    from {'search/build/libs'}
    from {'processes/migration/build/distributions'}
    from {'security/security-core/build/libs'}

    exclude "**.tar"
}


// zip installaton directory
task zipInstallDir(type:Zip) {
    description "Create zip from installation directory"
    baseName "installation"
    from "installation"
    destinationDir file('build/installation')
}


// disabled distributions
/*
task zipAllJavadocs(type: Zip) {
    String[] _spr = ["shared:common","security:security-core","rest","search"];
    description "create javadocs for ${_spr} and zip it"
    baseName "kramerius-javadoc"
    for(String project in _spr) {
        dependsOn(":${project}:javadoc")
        into(project) {
            from(tasks.getByPath(":${project}:javadoc").destinationDir)
        }

    }
}*/


