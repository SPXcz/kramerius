
apply plugin: 'war'

description "Admin web application"



sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/conf'
            srcDir 'src/java'
        }
    }

    test {
    java {
            srcDir 'src/test'
    }
    resources {
        srcDir 'src/test'
    }
    }
}

dependencies {

    providedCompile 'javax.servlet:servlet-api:2.5'
    providedCompile 'javax.servlet:jsp-api:2.0'
    providedCompile 'javax.portlet:portlet-api:2.0'

    api project(':bridge')
    api project(':shared:common')
    api project(':rest')

    api project(':security:security-core')
    api project(':security:authfilters')

    api project(':processes:import')
    api project(':processes:import-mets')
	
	// neni potreba 
	//api project(':processes:solr-migration')
    //api project(':processes:indexer')
    //api project(':processes:mw-process')
    //api project(':processes:data-migration')
    //api project(':processes:dnntflag')
    //api project(':processes:nkp-logs')

    api project(':processes:cdkreharvest')


    api 'javax.servlet:jstl:1.1.2'   
    api 'taglibs:standard:1.1.2'   
    api 'xalan:xalan:2.7.1'   


    api 'xerces:xercesImpl:2.9.1'

    api "org.slf4j:slf4j-api:${slf4jversion}"
    api "org.slf4j:log4j-over-slf4j:${slf4jversion}"
    api "org.slf4j:slf4j-jdk14:${slf4jversion}"

    api 'net.sf.json-lib:json-lib:2.4:jdk15'
    
    api group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.2'



    // cdk external tools - must be built and installed in m2 repo first
    //api group: 'cz.incad.kramerius.tools', name: 'solrmigration', version: '1.3'
    //api group: 'org.cdk.tools', name: 'cdkHarvester', version: '5.4.2.1_cdk'

    
}


task gitcall(type:Exec) {
   commandLine "git","rev-parse","HEAD"
   standardOutput = new ByteArrayOutputStream()
   doLast{
        byte[] bytes = standardOutput.toByteArray()
        ext.hash =new String(bytes).trim(); 
   }     
}


task infofile(dependsOn: gitcall)  {
    doLast {
        def parentFolder = new File("$buildDir/resources/main")
        parentFolder.mkdirs()

        def buildInfoFile = new File("$buildDir/resources/main/build.properties")
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props.setProperty('hash', gitcall.hash)

        props.store(buildInfoFile.newWriter(), null)
        println "Created build file ${buildInfoFile.absolutePath} with version ${project.version.toString()} and hash ${gitcall.hash} "
	}
}

//processResources.dependsOn infofile

war {
    baseName='search'
    archiveName ='search.war'
    from 'web'
    dependsOn 'infofile'
}




